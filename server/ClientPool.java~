package server;

import java.io.IOException;
import java.util.*;
import gamelogic.Trade;
/**
 * A group of {@link ClientHandler}s representing a "chat room".
 */
public class ClientPool {
	private static final int ID_BOUND = 4194304;
	private ArrayList<ClientHandler> _clients;
	private gamelogic.PublicGameBoard _board;
	private int _numCon;
	private Server _serv;
	private HashMap<Integer, Integer> _tradeIDs;
	private HashMap<String, Integer> _names;
	/**
	 * Initialize a new {@link ClientPool}.
	 */
	public ClientPool(int num, Server s) {
		_clients = new ArrayList<ClientHandler>();
		_numCon = num;
		_serv = s;
		_tradeIDs = new HashMap<Integer, Integer>();
		_names = new HashMap<String, Integer>();
	}
	
	public String getNames() {
		String toReturn = "";
		Iterator<Map.Entry<String,Integer>> i = _names.entrySet().iterator();
		while(i.hasNext()) {
			String toAdd = i.next().getKey();
			toReturn += toAdd.substring(0, toAdd.length() - 1) + ", ";
		}
		if(toReturn.length() >= 2) {
			return toReturn.substring(0, toReturn.length()-2);
		} else {
			return "";
		}
	}
	
	public boolean namesReady() {
		synchronized(_names) {
			return (_names.size() == _numCon);
		}
	}

	/**
	 * Add a new client to the chat room.
	 * 
	 * @param client to add
	 */
	public synchronized void add(ClientHandler client, int index) {
		_clients.add(index, client);
	}

	/**
	 * Remove a client from the pool. Only do this if you intend to clean up
	 * that client later.
	 * 
	 * @param client to remove
	 * @return true if the client was removed, false if they were not there.
	 */
	public synchronized boolean remove(ClientHandler client) {
		return _clients.remove(client);
	}
	
	public void addName(String n, Integer i) {
		synchronized(_names) {
			_names.put(n + i.toString(), i);
		}
	}
	
	public int getName(String n) {
		Iterator<Map.Entry<String, Integer>> i = _names.entrySet().iterator();
		while(i.hasNext()) {
			Map.Entry<String, Integer> entry = i.next();
			String next = entry.getKey();
			if(next.substring(0,next.length() - 1).equals(n)) {
				return entry.getValue();
			}
		}
		return -1;
	}
	/**
	 * Send a message to clients in the pool, but the sender.
	 * 
	 * @param message to send
	 * @param sender the client _not_ to s _goal.isLegal(this)end the message to (send to everyone
	 *          if null)
	 */

	public synchronized void broadcastMe(Object message, ClientHandler sender) {
		if(message.getClass().equals(Trade.class)) {
			((Trade) message).backup();
		}
		for (ClientHandler client : _clients) {
			if (sender != null && sender != client) {
				continue;
			}

			client.send(message);
		}
	}
	
	/**
	 * broadcasts to everyone but the client sender
	 */
	public synchronized void broadcast(Object e, ClientHandler sender) {
		
		if (e instanceof Trade) {
			Trade tr = (Trade) e;
			if (tr.isPropose() && ! _tradeIDs.containsKey(tr.getTradeID()) && ! tr.isBuild() && tr.getTradeID() != -1)
				addTrade(tr.getTradeID(), sender.getIndex());
			if (! tr.isBuild() && (tr.isPropose() || tr.isComplete())) _board.notifyAITrade(tr);
		}
		if(e.getClass().equals(Trade.class)) {
			((Trade) e).backup();
		}
		for (ClientHandler client : _clients) {
			if (sender != null && sender == client) {
				continue;
			}

			client.send(e);
		}
	}

	/**
	 * Broadcasts to all users except p1 and p2
	 */
	public synchronized void broadcastToElse(Object e, int p1, int p2) {
		if(e.getClass().equals(Trade.class)) {
			((Trade) e).backup();
		}
		for (int i=0; i<_clients.size(); i++) {
			if (i == p1 || i == p2) {
				continue;
			}

			_clients.get(i).send(e);
		}
	}
	
	/**
	 * Broadcasts only to user specified by id
	 */
	public synchronized void broadcastTo(Object e, int id) {
		if(e.getClass().equals(Trade.class)) {
			((Trade) e).backup();
		}
		if (e instanceof Trade) {
			Trade tr = (Trade) e;
			if (! tr.isBuild() && (tr.isPropose() || tr.isComplete())) _board.notifyAITrade(tr);
		}
		System.out.println("User being contacted with index " + Integer.toString(id) + "..."); // TODO: Debug line
		if (e instanceof Trade) {
			Trade tr = (Trade) e;
			if (! tr.isBuild() && (tr.isPropose() || tr.isComplete())) _board.notifyAITrade(tr);
		}
		if (id < _clients.size()) _clients.get(id).send(e);
	}
	
	/**
	 * Send the initialization message which includes the number of players, your index,
	 * the points needed to win, what hexes make up the board, and where ports are.
	 * Then it sends the two free roads and two free settlements
	 */
	public synchronized void initMessage(ClientHandler client) {
		client.send(client.getIndex() + "," + _numCon + "," + _board.getPointsToWin());
		client.send(_board.getState());
		client.send(_board.getPorts());
		client.send("7/free");
	}

	/**
	 * Close all {@link ClientHandler}s and empty the pool
	 */
	public synchronized void killall() {
		try {
			for(ClientHandler c : _clients) {
				c.kill();
			}
		} catch (Exception e) {

		}
		_clients.clear();
	}

	public void addBoard(gamelogic.PublicGameBoard board) {
		_board = board;
	}

	public synchronized gamelogic.PublicGameBoard getBoard() {
		return _board;
	}
	
	/**
	 * Adda trade to the tradeIDs hash
	 */
	public void addTrade(int id, int player) {
		System.out.println("Adding ID pairing (" + Integer.toString(id) + ", " + Integer.toString(player) + ")"); // TODO: Debug line
		synchronized (_tradeIDs) {
			_tradeIDs.put(new Integer(id), new Integer(player));
		}
	}

	/**
	 * Remove a trade from the tradeIDs hash
	 */
	public void removeTrade(int id) {
		synchronized (_tradeIDs) {
			_tradeIDs.remove(new Integer(id));
		}
	}
	
	/**
	 * Return the player that proposed a given trade
	 */
	public int getPlayerFromTrade(int id) {
		if (_tradeIDs == null) System.out.println("_tradeIDs is null!"); // TODO: Debug line
		synchronized (_tradeIDs) {
			if (! _tradeIDs.containsKey(id)) {
				System.out.println("Could not find trade ID " + Integer.toString(id) + "!"); // TODO: Debug line
				return -1;
			} else {
				return _tradeIDs.get(new Integer(id));
			}
		}
	}

	/**
	 * Mark the player as no longer connected
	 */
	public void lostConnection(int i) {
		_board.lostPlayer(i);
	}

	/**
	 * Generate the next random trade ID
	 */
	public int nextTradeID(int p) {
		synchronized (_tradeIDs) {
			Random rand = new Random();
			int ret;
			do {ret = rand.nextInt(ID_BOUND) + 101;}
			while (_tradeIDs.containsKey(ret));
			addTrade(ret, p);
			return ret;
		}
	}
}

